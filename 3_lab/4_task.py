# 4. Поиск максимальной суммы подмассива фиксированной длины
# Дан список целых чисел и длина подмассива k.
# Нужно найти подмассив длины k, сумма элементов которого будет максимальной.
# Вход: array = [1, -2, 3, 4, -1, 2, 1, -5, 4]              
# k = 3
# Выход:
# [3, 4, -1] 
# Сумма 6
array = [1, -2, 3, 4, -1, 2, 1, -5, 4] # исходный список
k = 3 # заданная длина подмассива
def max_summ (list, unit_size): # функция поиска подмассива заданной длины с максимальной суммой элементов
    stop = 0
    i = 0
    summ_list = []
    num_of_elem = len (list) # определяем длину исходного списка
    for i in range (num_of_elem): # в диапазонее от i до длины исходного списка
         stop = unit_size + i # определяем конечный индекс среза
         part_list = list [i:stop:] # с помощью среза выбираем из заданного списка блок нужной длины
         if len (part_list) >=3: # пока блок больше или равен заданной длине
            summ = sum (part_list) # суммируем элементы блока     
            summ_list.append(summ) # помещаем суммы в массив
            max_summ = max (summ_list) # определяем максимальный элемент в массиве сумм                       
    max_summ_part_list = list [summ_list.index(max_summ):(summ_list.index(max_summ)+unit_size)] # выбираем блок с максимальной суммой с помощью среза.
                                                                                                # начало среза - индекс максимального значения в массиве сумм
                                                                                                # конец среза  - индекс максимального значения в массиве сумм + заданная длина блока   
    return print ("Подмассив заданной длины с максимальной суммой элементов", max_summ_part_list), print ("Сумма", max_summ) # возвращаем блок с максимальной суммой элементов и сумму его элементов
print ("Исходный список", array)
print ("Длина подмассива", k)
max_summ(array, k)